/*=======================================================
    EMW3166 Handware Control Demo
    基础硬件测试程序
=======================================================*/
import EMW3166;

//全局变量，保存继电器状态
boolean RetyFlag;

//显示欢迎信息
void Welcome()
{
  PrintLn('============ Crab for MiCO ===============');
  PrintLn('= Power by Crab SDK 2.0 / MiCO SDK 3.2.2 =');
  PrintLn('= Program by aleyn.wu   / MXCHIP         =');
  PrintLn('= Support EMW3166, EMW3239               =');
  PrintLn('=                                        =');
  PrintLn('= Handware Control Demo                  =');
  PrintLn('==========================================');
}

//事件：当用户按下F1按键的时候
event OnKey1 : KEY_PRESS_F1
{
  if (Motor1.Active)
  {
    Board.Led1 = LED_OFF;

    //关闭马达
    Motor1.Active = false;

    PrintLn("Motor1 is Deactive");
  }
  else
  {
    Board.Led1 = LED_RED;

    //打开马达
    Motor1.Active = true;

    //马达的驱动频率为10000
    Motor1.Frequ = 10000;

    //马达的速度为80（最大100）
    Motor1.Speed = 80;

    PrintLn("Motor1 is Active, Frequ = 10000, Speed = 80");
  }
}

//事件：当用户按下F2按键的时候
event OnKey2 : KEY_PRESS_F2
{
  if (! Motor1.Active) return;

  if (Motor1.Polar == 0)
  {
    Board.Led1 = LED_BLUE;

    //马达反转
    Motor1.Polar = 1;

    PrintLn("Motor1 is CCW, Polar = 1");
  }
  else
  {
    Board.Led1 = LED_RED;

    //马达正转
    Motor1.Polar = 0;

    PrintLn("Motor1 is CW, Polar = 0");
  }
}

//事件：当用户按下F3按键的时候
event OnKey3 : KEY_PRESS_F3
{
  if (RetyFlag)
  {
    RetyFlag = False;

    //继电器断开，无电流
    Board.RETY = RETY_OFF;

    PrintLn("RETY set OFF");
  }
  else
  {
    RetyFlag = True;

    //继电器闭合，电流输出
    Board.RETY = RETY_ON;


    PrintLn("RETY set ON" );
  }
}

//事件：当用户按下F4按键的时候
event OnKey4 : KEY_PRESS_F4
{
  PrintLn("Beep Test");

  //蜂鸣器鸣叫三次，每次鸣叫/间停为250
  Board.Beep(250, 3);
}

main
{
  Welcome();

  //申请两个局部变量
  uint Twise = 0;      //保存当前旋扭状态
  uint OldTwise = 0;   //保存上一次旋扭状态
  
  //初始化全局变量：继电器状态
  RetyFlag = False;

  //打开事件驱动机制
  OpenEvent();

  repeat
  {
    //获取开发板上的旋钮刻度 0 - 100
    Twise = Board.TWIST;

    //如果马达已经打开，并且旋钮刻度不为0
    if ((Motor1.Active) && (Twise>0))
    {
      //如果当前旋钮刻度与上一次的旋钮刻度相差为+-1（加上+-1是因为旋钮有时候有误差和跳动）
      if ((Twise +1 < OldTwise) || (Twise - 1 > OldTwise))
      {
        //将马达的速度与旋钮刻度关联
        Motor1.Speed = Twise;
        Print("Motor1 Speed = " # Twise #\n);

        //保存当前刻度
        OldTwise = Twise;
      }
    }
  }
  until error;
  
  //关闭事件驱动机制
  CloseEvent();
}
